name: Implementation

on:
  push:
    paths:
    - 'setups/**'
    - 'rtl/**'
  pull_request:
    paths:
    - 'setups/**'
    - 'rtl/**'
  schedule:
    - cron: '0 0 * * 5'
  workflow_dispatch:

jobs:


  Matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}

    steps:

    - name: 'üîß Generate examples matrix'
      id: generate
      shell: python
      run: |
        print('::set-output name=matrix::' + str([
        {
          'board': 'UPduino_v3',
          'design': 'MinimalBoot',
          'bitstream': 'neorv32_UPduino_v3_MinimalBoot.bin'
        }, {
          'board': 'UPduino_v3',
          'design': 'UP5KDemo',
          'bitstream': 'neorv32_UPduino_v3_UP5KDemo.bin'
        }, {
          'board': 'Fomu',
          'design': 'Minimal',
          'bitstream': 'neorv32_Fomu_pvt_Minimal.bit'
        }, {
          'board': 'Fomu',
          'design': 'MinimalBoot',
          'bitstream': 'neorv32_Fomu_pvt_MinimalBoot.bit'
        }, {
          'board': 'Fomu',
          'design': 'UP5KDemo',
          'bitstream': 'neorv32_Fomu_pvt_UP5KDemo.bit'
        }]))


  All-in-one:
    needs: Matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Matrix.outputs.matrix) }}
    name: 'üõ≥Ô∏è All-in-one | ${{ matrix.board }} ¬∑ ${{ matrix.design }}'
    env:
      GHDL_PLUGIN_MODULE: ghdl

    steps:

    - name: 'üß∞ Repository Checkout'
      uses: actions/checkout@v2

    - name: '‚öôÔ∏è Generate ${{ matrix.board }} ${{ matrix.design }} bitstream'
      uses: docker://ghcr.io/hdl/debian-buster/impl
      with:
        args: make -C setups/examples BOARD=${{ matrix.board }} ${{ matrix.design }}

    - name: 'üì§ Upload Artifact: ${{ matrix.board }} ${{ matrix.design }} bitstream and reports'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.board }}-${{ matrix.design }}
        path: |
          setups/examples/${{ matrix.bitstream }}
          setups/osflow/${{ matrix.board }}/*-report.txt


  MSYS2:
    needs: Matrix
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [
          {icon: '‚¨õ', installs: 'MINGW32', arch: i686,   pkg: 'mcode' },
          {icon: 'üü¶', installs: 'MINGW64', arch: x86_64, pkg: 'llvm'  },
        ]
        example: ${{ fromJson(needs.Matrix.outputs.matrix) }}
    name: '${{ matrix.platform.icon }} ${{ matrix.platform.installs }} | ${{ matrix.example.board }} ¬∑ ${{ matrix.example.design }}'
    defaults:
      run:
        shell: msys2 {0}
    steps:

    - name: '${{ matrix.platform.icon }} Setup MSYS2'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.platform.installs }}
        update: true
        install: >
          make
          mingw-w64-${{ matrix.platform.arch }}-yosys
          mingw-w64-${{ matrix.platform.arch }}-nextpnr
          mingw-w64-${{ matrix.platform.arch }}-icestorm

    - name: '‚öôÔ∏è git config'
      run: git config --global core.autocrlf input
      shell: bash

    - name: 'üß∞ Checkout'
      uses: actions/checkout@v2
      with:
        # The command 'git describe' (used for version) needs the history.
        fetch-depth: 0

    - name: 'üöß Generate ${{ matrix.example.board }} ${{ matrix.example.design }} bitstream'
      run: make -C setups/examples BOARD=${{ matrix.example.board }} ${{ matrix.example.design }}
